<qtxmi:XMI xmlns:qtxmi="http://www.qt-project.org" xmlns:xmi="http://www.omg.org/spec/XMI/20110701" xmlns:uml="http://www.omg.org/spec/UML/20110701">
    <namespace path="">
        <class name="QUsedClass" isAbstract="false">
            <superclass include="QtCore/QObject" name="QObject"/>
        </class>
        <class name="QTestingClass" isAbstract="false">
            <documentation>Testing class' comment 1.Testing class' comment 2.</documentation>
            <qtumlinclude>/Enumerations</qtumlinclude>
            <superclass include="QtCore/QObject" name="QObject"/>
            <forwarddecl namespace="">QSet</forwarddecl>
            <forwarddecl namespace="">QUsedClass</forwarddecl>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="false">
                <accessor return="bool " name="readWriteSingleValuedPrimitiveAttribute" constness=" const"/>
                <accessor return="void " name="setReadWriteSingleValuedPrimitiveAttribute" constness="">
                    <parameter type="bool " name="readWriteSingleValuedPrimitiveAttribute"/>
                </accessor>
                <documentation>readWriteSingleValuedPrimitiveAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="true">
                <accessor return="bool " name="readOnlySingleValuedPrimitiveAttribute" constness=" const"/>
                <documentation>readOnlySingleValuedPrimitiveAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="false">
                <accessor return="const QSet&lt;bool&gt; *" name="readWriteMultiValuedPrimitiveAttributes" constness=" const"/>
                <accessor return="void " name="addReadWriteMultiValuedPrimitiveAttribute" constness="">
                    <parameter type="bool " name="readWriteMultiValuedPrimitiveAttribute"/>
                </accessor>
                <accessor return="void " name="removeReadWriteMultiValuedPrimitiveAttribute" constness="">
                    <parameter type="bool " name="readWriteMultiValuedPrimitiveAttribute"/>
                </accessor>
                <documentation>readWriteMultiValuedPrimitiveAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="true">
                <accessor return="const QSet&lt;bool&gt; *" name="readOnlyMultiValuedPrimitiveAttributes" constness=" const"/>
                <documentation>readOnlyMultiValuedPrimitiveAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="false">
                <accessor return="::VisibilityKind " name="readWriteSingleValuedEnumerationAttribute" constness=" const"/>
                <accessor return="void " name="setReadWriteSingleValuedEnumerationAttribute" constness="">
                    <parameter type="::VisibilityKind " name="readWriteSingleValuedEnumerationAttribute"/>
                </accessor>
                <documentation>readWriteSingleValuedEnumerationAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="true">
                <accessor return="::VisibilityKind " name="readOnlySingleValuedEnumerationAttribute" constness=" const"/>
                <documentation>readOnlySingleValuedEnumerationAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="false">
                <accessor return="const QSet&lt;::VisibilityKind&gt; *" name="readWriteMultiValuedEnumerationAttributes" constness=" const"/>
                <accessor return="void " name="addReadWriteMultiValuedEnumerationAttribute" constness="">
                    <parameter type="::VisibilityKind " name="readWriteMultiValuedEnumerationAttribute"/>
                </accessor>
                <accessor return="void " name="removeReadWriteMultiValuedEnumerationAttribute" constness="">
                    <parameter type="::VisibilityKind " name="readWriteMultiValuedEnumerationAttribute"/>
                </accessor>
                <documentation>readWriteMultiValuedEnumerationAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="true">
                <accessor return="const QSet&lt;::VisibilityKind&gt; *" name="readOnlyMultiValuedEnumerationAttributes" constness=" const"/>
                <documentation>readOnlyMultiValuedEnumerationAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="false">
                <accessor return="QUsedClass *" name="readWriteSingleValuedObjectAttribute" constness=" const"/>
                <accessor return="void " name="setReadWriteSingleValuedObjectAttribute" constness="">
                    <parameter type="const QUsedClass *" name="readWriteSingleValuedObjectAttribute"/>
                </accessor>
                <documentation>readWriteSingleValuedObjectAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="true">
                <accessor return="QUsedClass *" name="readOnlySingleValuedObjectAttribute" constness=" const"/>
                <documentation>readOnlySingleValuedObjectAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="false">
                <accessor return="const QSet&lt;QUsedClass *&gt; *" name="readWriteMultiValuedObjectAttributes" constness=" const"/>
                <accessor return="void " name="addReadWriteMultiValuedObjectAttribute" constness="">
                    <parameter type="const QUsedClass *" name="readWriteMultiValuedObjectAttribute"/>
                </accessor>
                <accessor return="void " name="removeReadWriteMultiValuedObjectAttribute" constness="">
                    <parameter type="const QUsedClass *" name="readWriteMultiValuedObjectAttribute"/>
                </accessor>
                <documentation>readWriteMultiValuedObjectAttribute.</documentation>
            </attribute>
            <attribute isDerived="false" isDerivedUnion="false" isReadOnly="true">
                <accessor return="const QSet&lt;QUsedClass *&gt; *" name="readOnlyMultiValuedObjectAttributes" constness=" const"/>
                <documentation>readOnlyMultiValuedObjectAttribute.</documentation>
            </attribute>
            <operation return="bool " name="opReturnPrimitiveSV" constness=" const">
                <documentation>Testing opReturnPrimitiveSV.</documentation>
            </operation>
            <operation return="const QSet&lt;bool&gt; *" name="opReturnPrimitiveMV" constness=" const">
                <documentation>Testing opReturnPrimitiveMV.</documentation>
            </operation>
            <operation return="::VisibilityKind " name="opReturnEnumerationSV" constness=" const">
                <documentation>Testing opReturnEnumerationSV.</documentation>
            </operation>
            <operation return="const QSet&lt;::VisibilityKind&gt; *" name="opReturnEnumerationMV" constness=" const">
                <documentation>Testing opReturnEnumerationMV.</documentation>
            </operation>
            <operation return="QUsedClass *" name="opReturnObjectSV" constness=" const">
                <documentation>Testing opReturnObjectSV.</documentation>
            </operation>
            <operation return="const QSet&lt;QUsedClass *&gt; *" name="opReturnObjectMV" constness=" const">
                <documentation>Testing opReturnObjectMV.</documentation>
            </operation>
            <operation return="void " name="opParameters" constness=" const">
                <parameter type="bool " name="pinprimitiveSV"/>
                <parameter type="::VisibilityKind " name="pinenumerationSV"/>
                <parameter type="const QUsedClass *" name="pinobjectSV"/>
                <parameter type="const QSet&lt;bool&gt; *" name="pinprimitiveMV"/>
                <parameter type="const QSet&lt;::VisibilityKind&gt; *" name="pinenumerationMV"/>
                <parameter type="const QSet&lt;QUsedClass *&gt; *" name="pinobjectMV"/>
                <parameter type="bool &amp;" name="pinoutprimitiveSV"/>
                <parameter type="::VisibilityKind &amp;" name="pinoutenumerationSV"/>
                <parameter type="QUsedClass *" name="pinoutobjectSV"/>
                <parameter type="QSet&lt;bool&gt; *" name="pinoutprimitiveMV"/>
                <parameter type="QSet&lt;::VisibilityKind&gt; *" name="pinoutenumerationMV"/>
                <parameter type="QSet&lt;QUsedClass *&gt; *" name="pinoutobjectMV"/>
                <parameter type="bool &amp;" name="poutprimitiveSV"/>
                <parameter type="::VisibilityKind &amp;" name="poutenumerationSV"/>
                <parameter type="QUsedClass *" name="poutobjectSV"/>
                <parameter type="QSet&lt;bool&gt; *" name="poutprimitiveMV"/>
                <parameter type="QSet&lt;::VisibilityKind&gt; *" name="poutenumerationMV"/>
                <parameter type="QSet&lt;QUsedClass *&gt; *" name="poutobjectMV"/>
                <documentation>Testing opParameters.</documentation>
            </operation>
        </class>
        <enumeration name="VisibilityKind">
            <documentation>VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model.</documentation>
            <literal name="VisibilityPublic" documentation="A public element is visible to all elements that can access the contents of the namespace that owns it."/>
            <literal name="VisibilityPrivate" documentation="A private element is only visible inside the namespace that owns it."/>
            <literal name="VisibilityProtected" documentation="A protected element is visible to elements that have a generalization relationship to the namespace that owns it."/>
            <literal name="VisibilityPackage" documentation="A package element is owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility. Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility). Outside the nearest enclosing package, an element marked as having package visibility is not visible."/>
        </enumeration>
    </namespace>
</qtxmi:XMI>
